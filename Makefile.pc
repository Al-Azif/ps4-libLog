# Binary name
PROJECTNAME   := libLog

# Libraries linked into the binary
LIBS          := # Not currently used

# Directorys to include
INCLUDES      := -Iinclude

# Additional compile flags
ERRORFLAGS    := -Wall -Wextra -Wpedantic -Werror
OTHERFLAGS    := -O0 -g -std=c99 -c -D_DEFAULT_SOURCE -D__LIBLOG_PC__

# -----------------------------------------------------------------------------
# Do not edit below this line unless you know what you are doing
# -----------------------------------------------------------------------------

ODIR          := build
SDIR          := src
CFLAGS        := $(INCLUDES) $(ERRORFLAGS) $(OTHERFLAGS)

# Check for valgrind flag
ifeq ($(__VALGRIND__),true)
CFLAGS += -D__VALGRIND__
endif

LFLAGS        := $(LIBS) # Not currently used

CFILES        := $(wildcard $(SDIR)/*.c)
OBJS          := $(patsubst $(SDIR)/%.c, $(ODIR)/%.o, $(CFILES))

UNAME_S := $(shell uname -s)
ifeq ($(UNAME_S),Linux)
	CC        := clang
	LD        := ld.lld # Not currently used
endif
ifeq ($(UNAME_S),Darwin)
	CC        := /usr/local/opt/llvm/bin/clang
	LD        := /usr/local/opt/llvm/bin/ld.lld # Not currently used
endif

# Make rules
$(PROJECTNAME): $(ODIR) $(OBJS)
	$(CC) $(ODIR)/*.o -o $(PROJECTNAME)
	@echo Built binary successfully!

$(ODIR)/%.o: $(SDIR)/%.c
	$(CC) $(CFLAGS) -o $@ $<

$(ODIR):
	@echo Creating build directory...
	@mkdir $@

.PHONY: all clean
.DEFAULT_GOAL := all

all: $(PROJECTNAME)

clean:
	@echo Cleaning up...
	@rm -rf $(PROJECTNAME) $(ODIR)
